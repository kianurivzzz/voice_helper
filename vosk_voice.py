import logging
import os
import subprocess
import tempfile
import threading
import time
from pathlib import Path

# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
logs_dir = Path('logs')
logs_dir.mkdir(exist_ok=True)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler(logs_dir / 'voice_helper.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger('vosk_voice')

# –§–ª–∞–≥ –¥–ª—è –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è
speaking_flag = threading.Event()
speaking_flag.clear()

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è vosk-tts
try:
    import importlib.util
    vosk_tts_installed = importlib.util.find_spec("vosk_tts") is not None
    if not vosk_tts_installed:
        logger.warning("–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ vosk-tts –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'pip install vosk-tts' –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏.")
except Exception as e:
    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–∞–ª–∏—á–∏—è vosk-tts: {e}")
    vosk_tts_installed = False

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –º–æ–¥–µ–ª–∏
model_path = Path('vosk-model-tts-ru-0.7-multi')
if not model_path.exists():
    logger.warning(f"–ú–æ–¥–µ–ª—å {model_path} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –°–∫–∞—á–∞–π—Ç–µ –º–æ–¥–µ–ª—å —Å https://alphacephei.com/vosk/models")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Vosk TTS, –µ—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
vosk_synth = None
if vosk_tts_installed:
    try:
        from vosk_tts import Model, Synth
        if model_path.exists():
            model = Model(model_name=str(model_path))
            vosk_synth = Synth(model)
            logger.info("Vosk TTS —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        else:
            logger.warning("–ú–æ–¥–µ–ª—å –¥–ª—è Vosk TTS –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Vosk TTS: {e}")
        vosk_synth = None

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ —Å–∏–Ω—Ç–µ–∑–∞—Ç–æ—Ä–∞ —Ä–µ—á–∏ (pyttsx3)
try:
    import pyttsx3
    engn = pyttsx3.init()
    engn.setProperty('rate', 180)  # speech rate

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥–æ–ª–æ—Å–æ–≤
    voices = engn.getProperty('voices')

    # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –º—É–∂—Å–∫–æ–π —Ä—É—Å—Å–∫–∏–π –≥–æ–ª–æ—Å
    male_ru_voice_found = False
    for voice in voices:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≥–æ–ª–æ—Å —Ä—É—Å—Å–∫–∏–π –∏ –º—É–∂—Å–∫–æ–π
        is_russian = 'russian' in voice.name.lower() or 'ru' in voice.id.lower()
        is_male = voice.gender == 'male' if hasattr(voice, 'gender') else ('male' in voice.name.lower())

        if is_russian and is_male:
            engn.setProperty('voice', voice.id)
            logger.info(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –º—É–∂—Å–∫–æ–π —Ä—É—Å—Å–∫–∏–π –≥–æ–ª–æ—Å: {voice.name}")
            male_ru_voice_found = True
            break

    # –ï—Å–ª–∏ –º—É–∂—Å–∫–æ–π —Ä—É—Å—Å–∫–∏–π –≥–æ–ª–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—â–µ–º –ª—é–±–æ–π —Ä—É—Å—Å–∫–∏–π
    if not male_ru_voice_found:
        for voice in voices:
            if 'russian' in voice.name.lower() or 'ru' in voice.id.lower():
                engn.setProperty('voice', voice.id)
                logger.info(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ä—É—Å—Å–∫–∏–π –≥–æ–ª–æ—Å: {voice.name}")
                break

    logger.info("–†–µ–∑–µ—Ä–≤–Ω—ã–π –¥–≤–∏–∂–æ–∫ —Å–∏–Ω—Ç–µ–∑–∞ —Ä–µ—á–∏ —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
except Exception as e:
    logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –¥–≤–∏–∂–∫–∞ —Å–∏–Ω—Ç–µ–∑–∞ —Ä–µ—á–∏: {e}")
    engn = None

def play_audio(file_path):
    """–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞"""
    try:
        if os.name == 'posix':  # Linux/Mac
            subprocess.run(['afplay', file_path], check=True)
        else:  # Windows
            import winsound
            winsound.PlaySound(file_path, winsound.SND_FILENAME)
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∞—É–¥–∏–æ: {e}")
        return False

def speaker(text):
    """–û–∑–≤—É—á–∏–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è"""
    try:
        # –ï—Å–ª–∏ —É–∂–µ –∏–¥–µ—Ç –æ–∑–≤—É—á–∏–≤–∞–Ω–∏–µ, –ø—Ä–µ—Ä—ã–≤–∞–µ–º –µ–≥–æ
        if speaking_flag.is_set():
            speaking_flag.clear()
            logger.info("–ü—Ä–µ–¥—ã–¥—É—â–µ–µ –æ–∑–≤—É—á–∏–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ")
            time.sleep(0.1)  # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è
        speaking_flag.set()

        # –í—ã–≤–æ–¥–∏–º —Ç–µ–∫—Å—Ç –≤ –∫–æ–Ω—Å–æ–ª—å
        print(f"–ê–ª–µ–∫—Å: {text}")

        # –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Vosk TTS —Å –º—É–∂—Å–∫–∏–º –≥–æ–ª–æ—Å–æ–º (speaker_id=2 –∏–ª–∏ 3)
        if vosk_synth:
            try:
                # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –∞—É–¥–∏–æ
                with tempfile.NamedTemporaryFile(suffix='.wav', delete=False) as temp_file:
                    temp_path = temp_file.name

                # –°–∏–Ω—Ç–µ–∑–∏—Ä—É–µ–º —Ä–µ—á—å —Å –º—É–∂—Å–∫–∏–º –≥–æ–ª–æ—Å–æ–º (speaker_id=2 –∏–ª–∏ 3 –¥–ª—è –º—É–∂—Å–∫–∏—Ö –≥–æ–ª–æ—Å–æ–≤)
                vosk_synth.synth(text, temp_path, speaker_id=3)  # –ú–æ–∂–Ω–æ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å 2 –∏–ª–∏ 3

                # –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –∞—É–¥–∏–æ
                success = play_audio(temp_path)

                # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                try:
                    os.unlink(temp_path)
                except:
                    pass

                if success:
                    speaking_flag.clear()
                    logger.info(f"–û–∑–≤—É—á–µ–Ω–æ —á–µ—Ä–µ–∑ Vosk TTS: {text[:50]}...")
                    return
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ Vosk TTS: {e}")

        # –ï—Å–ª–∏ Vosk TTS –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –∏—Å–ø–æ–ª—å–∑—É–µ–º pyttsx3
        if engn:
            engn.say(text)
            engn.runAndWait()
            logger.info(f"–û–∑–≤—É—á–µ–Ω–æ —á–µ—Ä–µ–∑ pyttsx3: {text[:50]}...")
        else:
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–∑–≤—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç: –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–∏–Ω—Ç–µ–∑–∞—Ç–æ—Ä–æ–≤ —Ä–µ—á–∏")

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è
        speaking_flag.clear()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è: {e}")
        speaking_flag.clear()

def speak(what):
    """–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è —Å –≤—ã–≤–æ–¥–æ–º –≤ –∫–æ–Ω—Å–æ–ª—å"""
    speaker(what)

def indicate_listening(status=True):
    """–ò–Ω–¥–∏–∫–∞—Ü–∏—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–ª—É—à–∞–Ω–∏—è"""
    if status:
        print("üé§ –°–ª—É—à–∞—é...")
    else:
        print("üîá –û–∂–∏–¥–∞–Ω–∏–µ...")

# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, –µ—Å–ª–∏ —Ñ–∞–π–ª –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é
if __name__ == "__main__":
    speaker("–ü—Ä–∏–≤–µ—Ç! –Ø –≥–æ–ª–æ—Å–æ–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –ê–ª–µ–∫—Å —Å –º—É–∂—Å–∫–∏–º –≥–æ–ª–æ—Å–æ–º. –¢–µ—Å—Ç–∏—Ä—É—é —Å–∏–Ω—Ç–µ–∑ —Ä–µ—á–∏.")
